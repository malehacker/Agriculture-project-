# -*- coding: utf-8 -*-
"""sem1_agri_proj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pqCRcnS_OJukKxSqfoZi0eN92Q9Pdkpw
"""

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns

from ipywidgets import  interact



data = pd.read_csv('/content/Agriculture.csv')

print("Shape of the Dataset :",data.shape)

data.head()

data.isnull()

data.isnull().sum()

data['label'].value_counts() #use pandas

#still using pandas
print("average Ratio of nitrogen in the soil : {0:.2f}".format(data['N'].mean()))
print("average Ratio of potassium in the soil : {0:.2f}".format(data['K'].mean()))
print("average Ratio of phosphorus in the soil : {0:.2f}".format(data['P'].mean()))
print("average Ratio of cesium in the soil : {0:.2f}".format(data['temperature'].mean()))
print("average  humidity : {0:.2f}".format(data['humidity'].mean()))
print("average ph value of the soil : {0:.2f}".format(data['ph'].mean()))
print("average Rainfallin mm : {0:.2f}".format(data['rainfall'].mean()))

#lets check summary of statistics of  each crop 
@interact
def summary(crops = list(data['label'].value_counts().index)):
    x = data[data['label']== crops]
    print("===========================================================================================================")
    print("statistics of nitrogen")
    print("Minimum nitrogen requiered  :",x['N'].min())
    print("average nitrogen required :", x['N'].mean())
    print("Max nitrogen required  :", x['N'].max())
    print("===========================================================================================================")
    print ("statistics of Phosporus")
    print("minimum required PHOSPORUS :",x['P'].min())
    print("average PHOSPORUS required :", x['P'].mean())
    print("max PHOSPORUS required :", x['P'].max())
    print("===========================================================================================================")
    print ("statistics of POTASSIUM")
    print("minimum required POTASSIUM :",x['K'].min())
    print("average  required :", x['K'].mean())
    print("max POTASSIUM required :", x['K'].max())
    print("===========================================================================================================")
    print ("statistics of TEMPERATURE")
    print("minimum required temperature :{0: .2f}".format(x['humidity'].min()))
    print("average nitrogen temperature :{0: .2f}".format(x['humidity'].mean()))
    print("max nitrogen temperature :{0: .2f}".format(x['humidity'].max()))
    print("===========================================================================================================")
    print ("statistics of PH")
    print("minimum required nitrogen :{0: .2f}".format(x['ph'].min()))
    print("average nitrogen required :{0: .2f}".format(x['ph'].mean()))
    print("max nitrogen required :{0: .2f}".format( x['ph'].max()))
    print("===========================================================================================================")
    print ("statistics of Rainfall")
    print("minimum required nitrogen :{0: .2f}".format(x['rainfall'].min()))
    print("average nitrogen required :{0: .2f}".format(x['rainfall'].mean()))
    print("max nitrogen required :{0: .2f}".format(x['rainfall'].max()))
    print("===========================================================================================================")

@interact
def compare(conditions = ['N','P','K', 'temperature', 'ph', 'humidity', 'rainfall' ]):
    print("average Value for", conditions,"is {0:.2f}".format(data[conditions].mean()))
    print("--------------------------------------------------------------------------------")
    print("Black Grams : {0:.2f}".format(data[data['label'] == 'blackgram'][conditions].mean()))
    print("Banana : {0:.2f}".format(data[(data['label'] == 'banana')][conditions].mean()))
    print("Jute : {0:.2f}".format(data[data['label' ] == 'jute' ][conditions].mean()))
    print("Jute : {0:.2f}".format(data[data[ 'label' ] =='jute'][conditions].mean()))
    print("Coconut : {0:.2f}".format(data[(data['label'] =='coconut' )][conditions].mean()))
    print("Apple : {0:.2f}".format(data[data['label'] == 'apple'][conditions].mean()))
    print("Papaya : {0:.2f}".format(data[(data['label'] == 'papaya')][conditions].mean()))

from sklearn.cluster import KMeans

x = data.drop(['label'],axis=1)

x= x.values

print(x.shape)

plt.rcParams['figure.figsize'] = (10,4)

wcss = []
for i in range(1,11):
    km  = KMeans(n_clusters = i , init = 'k-means++', max_iter = 300, n_init = 10 , random_state =0)
    km.fit(x)
    wcss.append(km.inertia_)

plt.plot(range(1,11),wcss)
plt.title('elbow method', fontsize=20)
plt.xlabel('No of Clusters')
plt.ylabel('wcss')
plt.show()

km = KMeans(n_clusters=4,init ='k-means++', max_iter=300, n_init=10,random_state=0 )
y_means = km.fit_predict(x)

a=data['label']
y_means = pd.DataFrame(y_means)
z = pd.concat([y_means,a],axis =1)
z = z.rename(columns={0 : 'cluster'})

# Lets check the Clusters of each Crops

print("Lets check the Results After Applying the K Means Clustering Analysis \n")
print("Crops in First Cluster:", z[z['cluster'] == 0]['label'].unique())
print("---- ")
print("Crops in Second Cluster at", z[z['cluster'] == 1]['label'].unique())
print("----")
print("Crops in Third Cluster:", z[z['cluster'] == 2] ['label'].unique())
print("--------")
print("Crops in Forth Cluster:", z[z['cluster']== 3]['label'].unique())

y  = data['label']
x = data.drop(['label'],axis =1)

print("shape of x:",x.shape)
print("shape of y :",y.shape)

from sklearn.model_selection import train_test_split

x_train , x_test , y_train ,y_test = train_test_split(x,y,test_size = 0.2 ,random_state = 0)

print("the shape of x train :",x_train.shape)
print("the shape of x train :",x_test.shape)
print("the shape of y train :",y_train.shape)
print("the shape of y train :",y_test.shape)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(x_train , y_train)
y_pred = model.predict(x_test)

from sklearn.metrics import confusion_matrix
plt.rcParams['figure.figsize']=(10,10)
cm = confusion_matrix(y_test, y_pred)
plt.title('confusing matrix of logistic regression',fontsize =15)
plt.show()

print(metrics.classification_report(y_test, y_pred))

prediction = model.predict((np.array9([90,40,40,20,80,7,200])))
print("the suggesed crop for givenn climatic condition is ",prdiction)































